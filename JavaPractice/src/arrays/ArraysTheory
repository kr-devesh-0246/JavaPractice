OutLine:-
1) The Arrays class
2) Sorting arrays
3) Searching arrays

1) Arrays class - It is a class that contains some static methods that are used with arrays.
namely:
-sorting
-searching
-comparing
-filling
-Returning a string representation of array

*Sorting an array
use method sort(array): sorts the whole array
data_type[] variable_name = {a2, a5, a4, a2, a1};
Arrays.sort(variable_name); //a1, a2, a3, a4, a5;
-To sort the in a particular range, Arrays.sort(variable_name, from_index, to_index);
It will sort from (from_index) and go to (to_index - 1)

-To sort String Array, understand how it is done
Example
String[] strings = {"abc", "def", "ghi"};
Arrays.sort(strings); // abc, def, ghi //it happens by comparing the 1st letter of each element and then 2nd element ,..

-To sort Point Array, understand why it can't be done
Example
Point[] points = {new Point(1, 2), new Point(3, 4), new Point(5, 6)};
Arrays.sort(points); //ERROR: ClassCastException.
It is because the sort uses .compareTo() method of the array object.
And String data type has the static method .compareTo() but the pointer data type doesn't have this method.

*Searching Arrays(using binarySearch())
-the array should be stored in increasing order.
-binarySearch(array, element)
 ->binarySearch(numbers, 4)
Q. What is the Return value of B.Search?
Ans. There are 2 possible cases:
a)Index of the element inside the array, if it exists
b) -(InsertionIndex + 1) if the element was not found

*Comparing Arrays(using equals())
Example
int[] numbers1 = {-3, -2, -1, 0, 1};
int[] numbers2 = {-3, -2, -1, 0, 1};
int[] numbers3 = {1, 2, 3, 4, 5};
Let's try using sout
System.out.println(numbers1 == numbers2); //false, because it always compares the address of these two objects
System.out.println(Arrays.equals(numbers1, numbers2)); //true, it compares the elements at resp. indices
System.out.println(Arrays.equals(numbers1, numbers3)): //false

Let's learn about comparing the arrays of objects

