OutLine:-
The Arrays class - It is a class that contains some static methods that are used with arrays.
namely:
-sorting
-searching
-comparing
-filling
-Returning a string representation of array

*Sorting an array
use method sort(array): sorts the whole array
data_type[] variable_name = {a2, a5, a4, a2, a1};
Arrays.sort(variable_name); //a1, a2, a3, a4, a5;
-To sort the in a particular range, Arrays.sort(variable_name, from_index, to_index);
It will sort from (from_index) and go to (to_index - 1)

-To sort String Array, understand how it is done
Example
String[] strings = {"abc", "def", "ghi"};
Arrays.sort(strings); // abc, def, ghi //it happens by comparing the 1st letter of each element and then 2nd element ,..

-To sort Point Array, understand why it can't be done
Example
Point[] points = {new Point(1, 2), new Point(3, 4), new Point(5, 6)};
Arrays.sort(points); //ERROR: ClassCastException.
It is because the sort uses .compareTo() method of the array object.
And String data type has the static method .compareTo() but the pointer data type doesn't have this method.

*Searching Arrays(using binarySearch())
-the array should be stored in increasing order.
-binarySearch(array, element)
 ->binarySearch(numbers, 4)
Q. What is the Return value of B.Search?
Ans. There are 2 possible cases:
a)Index of the element inside the array, if it exists
b) -(InsertionIndex + 1) if the element was not found





Lecture-2

Outline:-
* Comparing Arrays
* Equals method

* Comparing Arrays(using equals())
Example
int[] numbers1 = {-3, -2, -1, 0, 1};
int[] numbers2 = {-3, -2, -1, 0, 1};
int[] numbers3 = {1, 2, 3, 4, 5};
Let's try using sout
System.out.println(numbers1 == numbers2); //false, because it always compares the address of these two objects
System.out.println(Arrays.equals(numbers1, numbers2)); //true, it compares the elements at resp. indices
System.out.println(Arrays.equals(numbers1, numbers3)): //false


* Equals method
Let's learn about comparing the arrays of objects

Example-1
String[] strings1 = {"ab", "bc", "cd"};
String[] strings2 = {"ab", "bc", "cd"};
Let's try using sout
System.out.println(strings1 == strings2); //false
System.out.println(Arrays.equals(strings1, strings2)); //true

Example-2
Point[] points1 = {new Point(1, 2), new Point(3, 4)};
Point[] points2 = {new Point(1, 2), new Point(3, 4)};
Point[] points3 = {new Point(0, 0), new Point(1, 1)};
Let's try comparing using the system output
System.out.println(points1 == points2); //false
System.out.println(Arrays.equals(points1, points2)); //true, after comparing it element by element
System.out.println(Arrays.equals(points1, points3)); //false

Note on equals:-
There is an equals method builtin in the objects (primitive)
Example
String str1 = new String("Hello Java");
String str2 = new String("Hello Java");

System.out.println(str1 == str2); //false
System.out.println(str1.equals(str2)); //true

Similarly for Point data types
Example
Point p1 = new Point(1, 2);
Point p2 = new Point(1, 2);
Point p3 = new Point(3, 4);

System.out.println(p1 == p2); //false
System.out.println(p1.equals(p2)); //true
System.out.println(p1.equals(p3)); //false



Lecture - 3

Outline:-
* Filling arrays
* Printing arrays

*Filling Arrays(using fill() method)

Syntax - fill(array, value): fill whole array
int[] numbers1 = new int[8]; // {0, 0, 0, 0, 0, 0, 0, 0}
Arrays.fill(numbers1, 3);    // {3, 3, 3, 3, 3, 3, 3, 3}

Syntax - fill(array, fromIndex, toIndex, value)
int[] numbers2 = new int[8];    // {0, 0, 0, 0, 0, 0, 0, 0}
Arrays.fill(numbers2, 3, 7, 5); // {0, 0, 0, 5, 5, 5, 5, 5}

Let's learn filling an array of objects
String[] strings = new String[3]; //{null, null, null}
Array.fill(strings, "hello");     //{"hello", "hello", "hello"}
Same can be done using Points and mixed by slicing indices

* Printing Arrays(using toString())
it returns the string representation for an array
int[] numbers = {1, 2, 3, 4};
System.out.println(Arrays.toString(numbers)); // [1, 2, 3, 4] in string format
Similarly,
System.out.println(Arrays.toString(strings)); // [hello, hello, hello] in string format
